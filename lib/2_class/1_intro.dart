class Idol{
  String name = '블랙핑크';
 //생성자 : 클래스의 인스턴스를 생성하는 매서드
 Idol(String name) : this.name = name;
  void sayName(){
    print('나는 ${this.name} 입니다');
    print('저는 $name  입니다');
  }
}

/*
객체지향 프로그래밍 OOP
객체지향에 주된목적 DRY =>불필요한 코드에 반복을 방지하고
언제든 재활용 하세엽..

클래스 ->  상속 -> 오버라이드 -> 인터페이스 -> 믹스인 -> 추상
제네릭 -> 스태이틱 -> 캐스케이스 연산자

객체지향 프로그래밍에 존재이유는.....
수천 수만줄의 코드를 작성할때..모든 코드를 렌더 ( main)에
작성하면 정리가 안되서 유지 보수 협업에 ..큰장애물이 된다
그래서 클래스를 사용해서 서로 밀접한것끼리 묶어두면..
코드 관리가 용이함..

클래스는 일종의 설계도로 데이터가 보유할 속성과 기능을
정의하는 자료구조 입니다..

클래스를 이용해서 객체를 선언하면 해당 클래스의 인스턴스
객체지향 프로그래밍에서 기본은 클래스로 시작됩니다
* */